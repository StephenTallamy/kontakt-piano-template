 { Piano Template Script by Dave Hilowitz }
 { Note triggering scripts by Dave Hilowitz }
 { UI scripts by Angus-Roberts Carey (ARC Samples) }

on init

    { SETTINGS:
      Set the values below to the correct groups for your instrument.
      If you don't have samples for one of these group types, leave the
      array empty. An empty array looks like this: ().
      
      You must at least have a $note_without_pedal_group.
      You do not need to use the round robin functionality of this template.
      It is perfectly find to have only one group in each of these arrays.
      It is assumed that if there is more than one group in any of 
      these, we will do round robins. Remember to change the size of
      the arrays (the number in brackets after the array name) if you
      add multiple groups to any of these. }
    declare %note_without_pedal_groups[4]  := (0,1,2,3)
    declare %note_with_pedal_groups[4]     := (4,5,6,7)
    declare %release_trigger_groups[4]     := (8,9,10,11)
    declare %pedal_down_groups[4]          := (12,13,14,15)
    declare %pedal_up_groups[4]            := (16,17,18,19)
    { Release time that gets used when finger is let up on keys }
    declare $key_up_release_time_ms        := 400

    { This controls how responsive the knobs are. Make sure to keep this negative if you want this to be controllable via vertical dragging. }
    declare $controlSensitivity := -500

    { DON'T EDIT BELOW THIS POINT UNLESS YOU KNOW WHAT YOU'RE DOING }

    SET_CONDITION(NO_SYS_SCRIPT_PEDAL)
    SET_CONDITION(NO_SYS_SCRIPT_RLS_TRIG)
    message("")
    declare $i
    declare $tmp_note_id
    declare $tmp_event_note
    declare polyphonic $ignored_event_id
    declare const $ARRAY_SIZE := 500
    declare %tmp_event_ids[$ARRAY_SIZE]
    
    declare $pedal_down := 0
    declare $func_play_note_midi_note
    declare $func_play_note_velocity
    declare $func_stop_note_midi_note

    { Round robin tracking stuff }
    declare $tmp_rr := 0
    declare $note_without_pedal_last_rr := 0
    declare $note_with_pedal_last_rr := 0
    declare $release_trigger_last_rr := 0
    declare $pedal_down_last_rr := 0
    declare $pedal_up_last_rr := 0

    { UI Stuff }
    { Tell Kontakt we want a visible Performance View }
    make_perfview

    { Set the UI height and width for a our Performance View }
    set_ui_height_px(280) 
    set_ui_width_px(633)

    set_control_par_str($INST_ICON_ID,$CONTROL_PAR_PICTURE,"BLANK_ICON")
    set_control_par_str($INST_WALLPAPER_ID,$CONTROL_PAR_PICTURE,"Template_Skin")

    { This variable will be used for setting volumes in the $Vol knob handler. }
    declare $count

    { Declare top row of controls. These control volumes for the three busses. }
    declare ui_slider $One(1, 500000)
    make_persistent($One)
    declare $OneId
    $OneId := get_ui_id($One)
    set_control_par_str($OneId, $CONTROL_PAR_PICTURE, "ARC_Knob")
    set_control_par($OneId,$CONTROL_PAR_MOUSE_BEHAVIOUR, $controlSensitivity)

    declare ui_slider $Two(1, 500000)
    make_persistent($Two)
    declare $TwoId
    $TwoId := get_ui_id($Two)
    set_control_par_str($TwoId, $CONTROL_PAR_PICTURE, "ARC_Knob")
    set_control_par($TwoId,$CONTROL_PAR_MOUSE_BEHAVIOUR, $controlSensitivity)

    declare ui_slider $Three(1, 500000)
    make_persistent($Three)
    declare $ThreeId
    $ThreeId := get_ui_id($Three)
    set_control_par_str($ThreeId, $CONTROL_PAR_PICTURE, "ARC_Knob")
    set_control_par($ThreeId,$CONTROL_PAR_MOUSE_BEHAVIOUR, $controlSensitivity)

    { Positions the top row of controls }
    move_control_px($One, 195,95)
    move_control_px($Two,295,95)
    move_control_px($Three,395,95)

    { Declare knobs for the bottom row of controls }
    declare ui_slider $Vol(1,500000)
    make_persistent($Vol)
    declare $VolId
    $VolId := get_ui_id($Vol)
    set_control_par_str($VolId, $CONTROL_PAR_PICTURE, "ARC_Knob")
    set_control_par($VolId,$CONTROL_PAR_MOUSE_BEHAVIOUR,$controlSensitivity)

    declare ui_slider $FxOne(1, 1000000)
    make_persistent($FxOne)
    declare $FxOneId
    $FxOneId := get_ui_id($FxOne)
    set_control_par_str($FxOneId, $CONTROL_PAR_PICTURE, "ARC_Knob")
    set_control_par($FxOneId,$CONTROL_PAR_MOUSE_BEHAVIOUR,$controlSensitivity)

    declare ui_slider $FxTwo(1, 500000)
    make_persistent($FxTwo)
    declare $FxTwoId
    $FxTwoId := get_ui_id($FxTwo)
    set_control_par_str($FxTwoId, $CONTROL_PAR_PICTURE, "ARC_Knob")
    set_control_par($FxTwoId,$CONTROL_PAR_MOUSE_BEHAVIOUR,$controlSensitivity)

    { Positions the bottom row of controls }
    move_control_px($Vol, 195,195)
    move_control_px($FxOne,295,195)
    move_control_px($FxTwo,395,195)

end on

function func_play_regular_note
    { message("func_play_regular_note") }
    if(num_elements(%note_without_pedal_groups) <= 0)
        exit
    else
        if(num_elements(%note_without_pedal_groups) = 1)
            $tmp_rr := 0
        else
            if(num_elements(%note_without_pedal_groups) = 2) 
                $tmp_rr := 1 - $note_without_pedal_last_rr
            else
                if(num_elements(%note_without_pedal_groups) > 2)
                    $tmp_rr := random(0,num_elements(%note_without_pedal_groups) - 1)
                    while($tmp_rr = $note_without_pedal_last_rr) 
                        $tmp_rr := random(0,num_elements(%note_without_pedal_groups) - 1)
                    end while
                end if
            end if
        end if
    end if
    $note_without_pedal_last_rr := $tmp_rr

    $tmp_note_id := play_note($func_play_note_midi_note, $func_play_note_velocity, 0, -1) 
    set_event_par_arr($tmp_note_id,$EVENT_PAR_ALLOW_GROUP,0,$ALL_GROUPS)
    set_event_par_arr($tmp_note_id,$EVENT_PAR_ALLOW_GROUP,1,%note_without_pedal_groups[$tmp_rr])
    { %notes_playing[$func_play_note_midi_note] := $tmp_note_id }
    
end function

function func_play_sustain_note
    if(num_elements(%note_with_pedal_groups) <= 0)
        exit
    else
        if(num_elements(%note_with_pedal_groups) = 1)
            $tmp_rr := 0
        else
            if(num_elements(%note_with_pedal_groups) = 2) 
                $tmp_rr := 1 - $note_with_pedal_last_rr
            else
                if(num_elements(%note_with_pedal_groups) > 2)
                    $tmp_rr := random(0,num_elements(%note_with_pedal_groups) - 1)
                    while($tmp_rr = $note_with_pedal_last_rr) 
                        $tmp_rr := random(0,num_elements(%note_with_pedal_groups) - 1)
                    end while
                end if
            end if
        end if
    end if
    $note_with_pedal_last_rr := $tmp_rr

    $tmp_note_id := play_note($func_play_note_midi_note, $func_play_note_velocity, 0, -1) 
    set_event_par_arr($tmp_note_id,$EVENT_PAR_ALLOW_GROUP,0,$ALL_GROUPS)
    set_event_par_arr($tmp_note_id,$EVENT_PAR_ALLOW_GROUP,1,%note_with_pedal_groups[$tmp_rr])
    { %notes_playing[$func_play_note_midi_note] := $tmp_note_id }
end function

function func_play_release_trigger
    { message("func_play_RT: " & $func_play_note_midi_note) }
    if(num_elements(%release_trigger_groups) <= 0)
        exit
    else
        if(num_elements(%release_trigger_groups) = 1)
            $tmp_rr := 0
        else
            if(num_elements(%release_trigger_groups) = 2) 
                $tmp_rr := 1 - $note_with_pedal_last_rr
            else
                if(num_elements(%release_trigger_groups) > 2)
                    $tmp_rr := random(0,num_elements(%release_trigger_groups) - 1)
                    while($tmp_rr = $note_with_pedal_last_rr) 
                        $tmp_rr := random(0,num_elements(%release_trigger_groups) - 1)
                    end while
                end if
            end if
        end if
    end if
    $note_with_pedal_last_rr := $tmp_rr

    $tmp_note_id := play_note($func_play_note_midi_note, $func_play_note_velocity, 0, -1)
    set_event_par_arr($tmp_note_id,$EVENT_PAR_ALLOW_GROUP,0,$ALL_GROUPS)
    set_event_par_arr($tmp_note_id,$EVENT_PAR_ALLOW_GROUP,1,%release_trigger_groups[$tmp_rr])
end function

function func_play_pedal_down
    { message("pedal down") }
    if(num_elements(%pedal_down_groups) <= 0)
        exit
    else
        if(num_elements(%pedal_down_groups) = 1)
            $tmp_rr := 0
        else
            if(num_elements(%pedal_down_groups) = 2) 
                $tmp_rr := 1 - $note_with_pedal_last_rr
            else
                if(num_elements(%pedal_down_groups) > 2)
                    $tmp_rr := random(0,num_elements(%pedal_down_groups) - 1)
                    while($tmp_rr = $note_with_pedal_last_rr) 
                        $tmp_rr := random(0,num_elements(%pedal_down_groups) - 1)
                    end while
                end if
            end if
        end if
    end if
    $note_with_pedal_last_rr := $tmp_rr

    $tmp_note_id := play_note(64, 64, 0, 0)
    set_event_par_arr($tmp_note_id , $EVENT_PAR_ALLOW_GROUP, 0, $ALL_GROUPS)
    set_event_par_arr($tmp_note_id, $EVENT_PAR_ALLOW_GROUP, 1, %pedal_down_groups[$tmp_rr])
end function

function func_play_pedal_up
    {message("pedal up")}
    if(num_elements(%pedal_up_groups) <= 0)
        exit
    else
        if(num_elements(%pedal_up_groups) = 1)
            $tmp_rr := 0
        else
            if(num_elements(%pedal_up_groups) = 2) 
                $tmp_rr := 1 - $note_with_pedal_last_rr
            else
                if(num_elements(%pedal_up_groups) > 2)
                    $tmp_rr := random(0,num_elements(%pedal_up_groups) - 1)
                    while($tmp_rr = $note_with_pedal_last_rr) 
                        $tmp_rr := random(0,num_elements(%pedal_up_groups) - 1)
                    end while
                end if
            end if
        end if
    end if
    $note_with_pedal_last_rr := $tmp_rr

    $tmp_note_id := play_note(64, 64, 0, 0)
    set_event_par_arr($tmp_note_id , $EVENT_PAR_ALLOW_GROUP, 0, $ALL_GROUPS)
    set_event_par_arr($tmp_note_id, $EVENT_PAR_ALLOW_GROUP, 1, %pedal_up_groups[$tmp_rr])
end function

function func_stop_all_non_held_notes
    { message("func_stop_all_non_held_notes called") }
    get_event_ids(%tmp_event_ids)
    $i := 0
    { $note_count := 0 }
    while($i < $ARRAY_SIZE and %tmp_event_ids[$i] # 0)
        { message("event found: " & %tmp_event_ids[$i]) }
        $tmp_event_note := get_event_par(%tmp_event_ids[$i], $EVENT_PAR_NOTE) 
        { message("event " & %tmp_event_ids[$i] & "; MIDI note " & $tmp_event_note & "; keydown=" & %KEY_DOWN[$tmp_event_note]) }
        if (%KEY_DOWN[$tmp_event_note] = 0)
            { message("Stopping MIDI note: " & $tmp_event_note) }
            { stop it! }
            fade_out(%tmp_event_ids[$i], $key_up_release_time_ms * 1000, 1)
            { note_off($i) }
            { %notes_playing[$tmp_event_note] := 0 }
        end if
        inc($i)
    end while
    { message("Active Events: " & $note_count) }
end function

{ cycle through all events that are currently taking place 
  and stop any note that has the same MIDI note number }
        
function func_stop_midi_note_if_playing
    { message("func_stop_midi_note_if_playing called") }
    get_event_ids(%tmp_event_ids)
    $i := 0
    while($i < $ARRAY_SIZE and %tmp_event_ids[$i] # 0)
        if (event_status(%tmp_event_ids[$i]) = $EVENT_STATUS_NOTE_QUEUE and %tmp_event_ids[$i] # $ignored_event_id)
            { message("event found: " & %tmp_event_ids[$i]) }
            $tmp_event_note := get_event_par(%tmp_event_ids[$i], $EVENT_PAR_NOTE) 
            { message("event " & %tmp_event_ids[$i] & "; MIDI note " & $tmp_event_note & "; keydown=" & %KEY_DOWN[$tmp_event_note]) }
            if ($func_stop_note_midi_note = $tmp_event_note)
                { message("Stopping MIDI note: " & $tmp_event_note) }
                { stop it! }
                fade_out(%tmp_event_ids[$i], $key_up_release_time_ms * 1000, 1)
                { note_off($i) }          
            end if
        end if
        inc($i)
    end while
    
    { %notes_playing[$func_stop_note_midi_note] := 0 }
end function

on controller
    if ($CC_NUM = 64)
        if (%CC[64] > 64)
            if($pedal_down = 0)
                call func_play_pedal_down
                $pedal_down := 1
            end if 
        else
            if($pedal_down = 1)
                call func_stop_all_non_held_notes
                call func_play_pedal_up
                $pedal_down := 0
            end if
        end if
    end if
end on

on note
    ignore_event($EVENT_ID)
    { message($EVENT_ID) }
    $ignored_event_id := $EVENT_ID
    
    $func_play_note_midi_note := $EVENT_NOTE
    $func_play_note_velocity := $EVENT_VELOCITY

    if (%CC[64] >= 64)
        call func_play_sustain_note
    else
        
        $func_stop_note_midi_note := $func_play_note_midi_note
        call func_stop_midi_note_if_playing       
        call func_play_regular_note
    end if
end on

on release 
    ignore_event($EVENT_ID)
    { message("release event: " & $EVENT_ID) }
    if($EVENT_ID = $ignored_event_id) 
        exit
    end if
    
    if(%CC[64] < 64)
        $func_stop_note_midi_note := $EVENT_NOTE
        call func_stop_midi_note_if_playing
    end if    

    { We play the release trigger regardless of whether or not the pedal is down. }
    
    $func_play_note_midi_note := $EVENT_NOTE
    $func_play_note_velocity := $EVENT_VELOCITY
    call func_play_release_trigger
    
end on

on ui_control($One)
    { Sets the volume of the `Group 1` bus. }
    set_engine_par($ENGINE_PAR_VOLUME, $One,-1,-1,$NI_BUS_OFFSET + 0)
end on

on ui_control($Two)
    { Sets the volume of the `Group 2` bus. }
    set_engine_par($ENGINE_PAR_VOLUME, $Two,-1,-1,$NI_BUS_OFFSET + 1)
end on

on ui_control($Three)
    { Sets the volume of the `Group 3` bus. }
    set_engine_par($ENGINE_PAR_VOLUME, $Three,-1,-1,$NI_BUS_OFFSET + 2)
end on

on ui_control($Vol)
    { This loops through all groups and sets their volume according to the $Vol knob. }
    $count := 0
    while ($count < $NUM_GROUPS)
        set_engine_par($ENGINE_PAR_VOLUME, $Vol, $count, -1, -1)
        inc($count)
    end while
end on

on ui_control($FxOne)
    set_engine_par($ENGINE_PAR_CUTOFF, $FxOne, -1,0,1)
end on 

on ui_control($FxTwo)
    set_engine_par($ENGINE_PAR_SENDLEVEL_0, $FxTwo,-1,7 ,0)
end on

